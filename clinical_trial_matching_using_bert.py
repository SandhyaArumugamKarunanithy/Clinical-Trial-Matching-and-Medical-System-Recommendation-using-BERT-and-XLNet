# -*- coding: utf-8 -*-
"""Clinical Trial Matching using BERT.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1b9oj65dpLUazehS8cWFwI3aml0dDlw7H
"""

import re
import nltk
from nltk.corpus import stopwords
from nltk.tokenize import word_tokenize
import requests
import json
import os
nltk.download("punkt")
nltk.download("stopwords")
import torch
from transformers import AutoTokenizer, AutoModel
from scipy.spatial.distance import cosine
import pandas as pd
import matplotlib.pyplot as plt
from datetime import datetime
from collections import Counter

!pip install transformers

def fetch_trials(query, max_results=1000):
    api_url = "https://clinicaltrials.gov/api/query/full_studies"
    trials_data = {"FullStudiesResponse": {"FullStudies": []}}    
    for min_rnk in range(1, max_results + 1, 100):  
        params = {
            "expr": query,
            "min_rnk": min_rnk,
            "max_rnk": min(min_rnk + 99, max_results),  
            "fmt": "json"
        }
        response = requests.get(api_url, params=params)

        if response.status_code == 200:
            current_batch = response.json()
            trials_data["FullStudiesResponse"]["FullStudies"].extend(current_batch["FullStudiesResponse"]["FullStudies"])
        else:
            print(f"API request failed with status code {response.status_code}")
            print(response.text)
            return None
        
    return trials_data

medical_conditions = ["diabetes", "hypertension", "cancer", "Alzheimer's disease"]
all_trials_data = {}
for condition in medical_conditions:
    print(f"Fetching trials for {condition}...")
    trials_data = fetch_trials(condition, max_results=50)
    all_trials_data[condition] = trials_data
    print(f"Fetched {len(trials_data['FullStudiesResponse']['FullStudies'])} trials for {condition}\n")

#trials_data = fetch_trials(query, max_results=50)

def load_synthetic_patients(patient_profiles_dir):
    patient_profiles = []
    for filename in os.listdir(patient_profiles_dir):
        if filename.endswith(".json"):
            filepath = os.path.join(patient_profiles_dir, filename)
            with open(filepath, 'r') as f:
                patient_data = json.load(f)

              
                disorder_conditions = [condition for condition in patient_data['conditions']
                                       if '(disorder)' in condition['display'].lower()]
                patient_data['conditions'] = disorder_conditions

                patient_profiles.append(patient_data)
    
    return patient_profiles

patient_profiles_dir = "/content/Metadata" 
patient_profiles = load_synthetic_patients(patient_profiles_dir)

def calculate_age(birthdate_str):
    birthdate = datetime.strptime(birthdate_str, '%Y-%m-%d')
    age = (datetime.now() - birthdate).days // 365
    return age
#NOTE: please change the path of the folder to the folder where simple patient profiles are present 
patient_profiles_dir = "/content/Metadata" 
patient_profiles = load_synthetic_patients(patient_profiles_dir)


data = {'gender': [], 'age': []}
for profile in patient_profiles:
    data['gender'].append(profile['gender'])
    data['age'].append(calculate_age(profile['birthDate']))

df = pd.DataFrame(data)
plt.figure()
df['gender'].value_counts().plot(kind='bar', title='Gender Distribution', color="teal")
plt.xlabel('Gender')
plt.ylabel('Count')
plt.xticks(rotation=0)
plt.show()
plt.figure()
df['age'].plot(kind='hist', bins=20, rwidth=0.8, title='Age Distribution',color="teal")
plt.xlabel('Age')
plt.ylabel('Count')
plt.show()

data = {'gender': [], 'age': [], 'conditions': []}
for profile in patient_profiles:
    data['gender'].append(profile['gender'])
    data['age'].append(calculate_age(profile['birthDate']))
    patient_conditions = [condition['display'] for condition in profile['conditions']]
    data['conditions'].append(patient_conditions)
df = pd.DataFrame(data)
all_conditions = [condition for patient_conditions in data['conditions'] for condition in patient_conditions]
condition_counts = Counter(all_conditions).most_common(15)
plt.figure()
condition_labels, condition_values = zip(*condition_counts)
clean_condition_labels = [label.replace('(disorder)', '').strip() for label in condition_labels]
plt.bar(clean_condition_labels, condition_values, color="teal")
plt.title('Top 20 Disorders')
plt.xlabel('Disorder')
plt.ylabel('Count')
plt.xticks(rotation=90)
plt.show()

def preprocess_text(text):
    text = text.lower()
    words = word_tokenize(text)
    stop_words = set(stopwords.words("english"))
    words = [word for word in words if word not in stop_words]  
    cleaned_text = " ".join(words)   
    return cleaned_text

def extract_age_gender_conditions(text):
    age_condition = re.search(r'(\d+)\s*years?\s*old', text)
    min_age = int(age_condition.group(1)) if age_condition else None
    gender_condition = re.search(r'(male|female|men|women)', text)
    if gender_condition:
        gender = gender_condition.group(1)
        if gender in ['men', 'male']:
            gender = 'male'
        else:
            gender = 'female'
    else:
        gender = None

    return min_age, gender

for trial in trials_data["FullStudiesResponse"]["FullStudies"]:
    description_module = trial["Study"]["ProtocolSection"]["DescriptionModule"]
    eligibility_module = trial["Study"]["ProtocolSection"]["EligibilityModule"]

    description = description_module.get("DetailedDescription", "")
    eligibility = eligibility_module.get("EligibilityCriteria", "")

    description_module["CleanedDescription"] = preprocess_text(description)
    min_age, gender = extract_age_gender_conditions(eligibility)
    eligibility_module["MinAge"] = min_age
    eligibility_module["Gender"] = gender

for patient_profile in patient_profiles:
    conditions = patient_profile["conditions"]
    cleaned_conditions = []
    for condition in conditions:
        if condition["code"] != "425400000":
            cleaned_conditions.append(preprocess_text(condition["display"]))
    patient_profile["CleanedConditions"] = cleaned_conditions

model_name = "bert-base-uncased"
tokenizer = AutoTokenizer.from_pretrained(model_name)
model = AutoModel.from_pretrained(model_name)

def get_embedding(text):
    inputs = tokenizer(text, return_tensors="pt", padding=True, truncation=True)
    with torch.no_grad():
        outputs = model(**inputs)
    return outputs.last_hidden_state.mean(dim=1).numpy().reshape(-1)


for patient_profile in patient_profiles:
    conditions = " ".join(patient_profile["CleanedConditions"])
    patient_profile["Embedding"] = get_embedding(conditions)

for trial in trials_data["FullStudiesResponse"]["FullStudies"]:
    description_module = trial["Study"]["ProtocolSection"]["DescriptionModule"]
    description = description_module["CleanedDescription"]
    description_module["Embedding"] = get_embedding(description)

for patient_profile in patient_profiles:
    patient_embedding = patient_profile["Embedding"]
    patient_profile["TrialSimilarities"] = []

    for trial in trials_data["FullStudiesResponse"]["FullStudies"]:
        description_module = trial["Study"]["ProtocolSection"]["DescriptionModule"]
        trial_embedding = description_module["Embedding"]
        similarity = 1 - cosine(patient_embedding, trial_embedding)
        patient_profile["TrialSimilarities"].append(similarity)

def recommend_trials(patient_profile, trials_data, top_k=3): 
    gender = patient_profile["gender"]
    age = patient_profile.get("age") 
    filtered_trials = [
        trial for trial in trials_data["FullStudiesResponse"]["FullStudies"]
        if trial["Study"]["ProtocolSection"]["EligibilityModule"]["Gender"] in (gender, "all")
    ]   
    if age:
        filtered_trials = [
            trial for trial in filtered_trials
            if age >= trial["Study"]["ProtocolSection"]["EligibilityModule"]["MinAge"]
        ]
    trial_similarities = patient_profile["TrialSimilarities"]
    sorted_trials = sorted(filtered_trials, key=lambda trial: trial_similarities.pop(0), reverse=True)   
    return sorted_trials[:top_k]

top_k = 3
for patient_profile in patient_profiles:
    recommended_trials = recommend_trials(patient_profile, trials_data, top_k)
    patient_profile["RecommendedTrials"] = recommended_trials

# for patient_profile in patient_profiles:
#     print(f"Patient_ID: {patient_profile['name']}")
#     print("Recommended trials:")
#     for trial in patient_profile["RecommendedTrials"]:
#         nct_id = trial["Study"]["ProtocolSection"]["IdentificationModule"]["NCTId"]
#         title = trial["Study"]["ProtocolSection"]["IdentificationModule"]["OfficialTitle"]
#         print(f"Trial_ID: {nct_id}\nTitle: {title}\n")